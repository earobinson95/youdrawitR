[{"path":"https://earobinson95.github.io/youdrawitR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 E. Robinson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://earobinson95.github.io/youdrawitR/articles/customDataGen.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Examples: customDataGen","text":"customDataGen() versatile function processes dataframe generate data suitable visualizing drawr() function. function allows specify type regression, degree polynomial loess regression, whether apply log transformation y fitted line, whether confidence interval generated. example, use iris dataset use customDataGen() function process . customDataGen()function necessarily need provide xvar yvar, none provided use first column xvar second column yvar. additional information parameters customDataGen() function look function documentation. customDataGen() function returns list containing point data line data processed inputted data frame. Now let’s input data drawr() function visualize processed data. Additionally can specify axis labels titles graph, well produce 95% confidence interval since generated using customDataGen earlier. Try drawing plot ! See can replicate regression line. Additionally, can also draw 95% confidence interval boundaries using “new line” button. fun experimenting interactive plot!","code":"# Use customDataGen to process the data custom_data <- customDataGen(   df = iris,   xvar = \"Petal.Length\",   yvar = \"Petal.Width\",   regression_type = \"linear\",   log_y = FALSE,   conf_int = TRUE # conf_int can only be true for linear regression ) # Print out the custom data custom_data #> $line_data #> # A tibble: 150 × 7 #>    data          x      y  coef    int lower_bound upper_bound #>    <chr>     <dbl>  <dbl> <dbl>  <dbl>       <dbl>       <dbl> #>  1 line_data   1   0.0527 0.416 -0.363    -0.00927       0.115 #>  2 line_data   1.1 0.0943 0.416 -0.363     0.0339        0.155 #>  3 line_data   1.2 0.136  0.416 -0.363     0.0770        0.195 #>  4 line_data   1.2 0.136  0.416 -0.363     0.0770        0.195 #>  5 line_data   1.3 0.177  0.416 -0.363     0.120         0.235 #>  6 line_data   1.3 0.177  0.416 -0.363     0.120         0.235 #>  7 line_data   1.3 0.177  0.416 -0.363     0.120         0.235 #>  8 line_data   1.3 0.177  0.416 -0.363     0.120         0.235 #>  9 line_data   1.3 0.177  0.416 -0.363     0.120         0.235 #> 10 line_data   1.3 0.177  0.416 -0.363     0.120         0.235 #> # ℹ 140 more rows #>  #> $point_data #> # A tibble: 150 × 3 #>    data           x     y #>    <chr>      <dbl> <dbl> #>  1 point_data   1     0.2 #>  2 point_data   1.1   0.1 #>  3 point_data   1.2   0.2 #>  4 point_data   1.2   0.2 #>  5 point_data   1.3   0.2 #>  6 point_data   1.3   0.4 #>  7 point_data   1.3   0.2 #>  8 point_data   1.3   0.2 #>  9 point_data   1.3   0.3 #> 10 point_data   1.3   0.3 #> # ℹ 140 more rows drawr(custom_data,        title = \"Petal Width vs Petal Length\",        x_lab = \"Petal Width\",       subtitle = \"Petal Length\",       conf_int = TRUE)"},{"path":"https://earobinson95.github.io/youdrawitR/articles/customDataGen.html","id":"different-regression-options","dir":"Articles","previous_headings":"","what":"Different Regression Options","title":"Examples: customDataGen","text":"customDataGen() currently offers four regression options: linear, polynomial, logistic, loess. Since already saw linear let’s take look others.","code":""},{"path":"https://earobinson95.github.io/youdrawitR/articles/customDataGen.html","id":"logistic-regression","dir":"Articles","previous_headings":"Different Regression Options","what":"Logistic Regression","title":"Examples: customDataGen","text":"customDataGen() function can generate logistic regression data binary categorical variables. case use either setosa species. need worry changing variable factor customDataGen function . success_level argument specifies two levels binary response variable considered “event” “success”. case, interested occurrence ‘setosa’ species, set “setosa” success_level. success_level provided, function default using first level binary response variable, sorted alphabetically. , binary response levels “yes” “”, specify success_level, function treat “” “success” level, since “” comes “yes” alphabetically. ’s another chance test data drawing skills! Try draw logistic regression curve showing probability iris ‘Setosa’ species based sepal length.","code":"# Convert Species into a binary categorical variable iris$binary_species <- ifelse(iris$Species == \"setosa\", \"setosa\", \"other\") # Generate custom data for logistic regression custom_data_logistic <- customDataGen(   df = iris,   xvar = \"Sepal.Length\",  # Predictor variable (numeric): Sepal length in centimeters   yvar = \"binary_species\", # Response variable (binary categorical): Setosa (1) or Other (0)   regression_type = \"logistic\",   success_level = \"setosa\" ) drawr(custom_data_logistic,       title = \"Probability of 'Setosa' Species Based on Sepal Length\",       aspect_ratio = 1.2)"},{"path":"https://earobinson95.github.io/youdrawitR/articles/customDataGen.html","id":"polynomial-regression","dir":"Articles","previous_headings":"Different Regression Options","what":"Polynomial Regression","title":"Examples: customDataGen","text":"Polynomial regression can used model relationships variables aren’t linear. case, ’ll generate second degree polynomial regression using “Petal.Length” x variable, “Sepal.Length” y variable. example, used degree 2, means fitting quadratic polynomial data. Higher degrees fit complex polynomial curves, remember aware higher-degree polynomials can lead fitting. Let’s visualize data using drawr() function: Go ahead, try draw polynomial regression curve showing relationship petal length sepal length. may challenging previous plots relationship linear!","code":"# Generate custom data for polynomial regression custom_data_poly <- customDataGen(   df = iris,   xvar = \"Petal.Length\",   yvar = \"Sepal.Length\",   regression_type = \"polynomial\",   degree = 2 # default is 2 if not specified for poly regression ) drawr(custom_data_poly,        title = \"Sepal Length vs Petal Length: Poly Regression\")"},{"path":"https://earobinson95.github.io/youdrawitR/articles/customDataGen.html","id":"loess-regression","dir":"Articles","previous_headings":"Different Regression Options","what":"Loess Regression","title":"Examples: customDataGen","text":"Loess regression non-parametric method uses local data fitting fit smooth curve points scatter plot. ’ll generate loess regression using “Sepal.Length” x variable, “Sepal.Width” y variable. example, used span 0.75, determines amount data considered local fit. Adjusting span parameter allows control flexibility loess fit. large span result regression -smoothed, resulting bias loss information, small span insufficient data can result larger variance fitting. details selecting optimal smoothing parameter, can refer guide. degree parameter determines degree polynomials used local fitting. degree 1 fits straight lines, degree 2 fits parabolas. Using higher degree can capture complex patterns, careful fit. Using degree 0 turn loess weighted moving average. Now can visualize data: Try draw loess regression curve. might challenging plot yet, relationship sepal width sepal length complex non-linear, can almost imagine giving kid crayon telling draw line points. Good luck!","code":"# Generate custom data for loess regression custom_data_loess <- customDataGen(   df = iris,   xvar = \"Petal.Width\",   yvar = \"Sepal.Width\",   regression_type = \"loess\",   degree = 1, # default if not specified is 1 for loess regression (must be 0, 1, or 2)   span = 0.75 # default if not specified is 0.75 (ranges between 0 and 1) ) drawr(custom_data_loess,       title = \"Sepal Width vs Petal Width: Loess Regression\")"},{"path":"https://earobinson95.github.io/youdrawitR/articles/customDataGen.html","id":"logarithmic-scale","dir":"Articles","previous_headings":"","what":"Logarithmic Scale","title":"Examples: customDataGen","text":"youdrawitR package offers functionality plot data logarithmic scale. can particularly useful dealing data exhibit exponential growth decay. transforming data onto logarithmic scale, exponential trends can made linear, can simplify task drawing trend. using customDataGen() function, can specify log_y = TRUE indicate y variable transformed logarithmic scale. transform fitted line log(y) ~ x. log_y specified FALSE, fitted line transformed. using log transformation remember y variable data must positive. Additionally, important note youdrawitR package currently supports log transformation linear regression option. drawr() function, can set linear argument anything “true” put graph logarithmic scale. whenever log_y = TRUE customDataGen(). Also, can specify base logarithm log_base argument. log_base provided NULL, natural logarithm (base e) used. sure use log_base value customDataGen() drawr() functions. order make transformed fitted line compatible logarithmic scale, drawr() function exponentiates y-values line data fitted line correctly adjusted represent linear trend logarithmic scale. Let’s see feature action: plot , can try draw trend line. ’ll notice despite original data exponential relationship x y, line data point data log scale exhibit linear relationship. Hence, plotting data logarithmic scale can simplify task identifying drawing trends data exponential growth patterns. Let’s compare graph look linear scale: can see, exponential nature data much challenging draw understand linear scale. Although may different regression types potentially fit trend better linear scale, transforming data logarithmic scale always viable option. transforms complex exponential growth patterns straightforward linear relationships, making task drawing understanding trends significantly easier.","code":"set.seed(123)  # Generate x-values x_values <- seq(1, 100, by = 1)  # Generate y-values with exponential growth and some random noise y_values <- exp(0.05 * x_values) * rnorm(length(x_values), mean = 1, sd = 0.2)  # Make sure all y-values are positive y_values <- ifelse(y_values <= 0, abs(y_values), y_values)  # Combine into a data frame exp_data <- data.frame(   x = x_values,   y = y_values )  # Generate custom data for linear regression with log-transformed y custom_data_log <- customDataGen(   df = exp_data,   regression_type = \"linear\", # must be linear for log_y to be TRUE   log_y = TRUE,   log_base = NULL )  # Plot the data with a logarithmic y-scale drawr(custom_data_log,       linear = FALSE,       log_base = NULL,       title = \"Log Scale\") # Generate custom data custom_data_linear <- customDataGen(   df = exp_data,   regression_type = \"linear\",   log_y = FALSE, )  # Plot the data with a linear y-scale drawr(custom_data_linear,       linear = \"true\",       title = \"Linear Scale\")"},{"path":[]},{"path":"https://earobinson95.github.io/youdrawitR/articles/customizing.html","id":"axis-range-labels","dir":"Articles","previous_headings":"Customizing The Plot","what":"Axis Range & Labels","title":"Guide: Plot Customization and Button Usage","text":"two ways customize range values displayed x y axis. aware, even specified range smaller range point data, line still fitted points dataset. first way specify x_range y_range want data. left NULL (default), function automatically use range max line point data x y values. second way specify x_axis_buffer y_axis_buffer. add buffer axis, percent total range. Thus, input must greater equal 0. add axis labels use x_lab y_lab parameters. add titles use title subtitle parameters. example use parameters.","code":"drawr(data = data, x_range = c(0, 25), y_range = c(-2, 20)) #> Warning in drawr(data = data, x_range = c(0, 25), y_range = c(-2, 20)): The #> provided y_range does not cover data, the line will still be fitted from entire #> dataset. drawr(data = data, x_axis_buffer = 0.1, y_axis_buffer = 0.1) drawr(data = data, title = \"Sales Over Time\", x_lab = \"Time\", y_lab = \"Sales\")"},{"path":"https://earobinson95.github.io/youdrawitR/articles/customizing.html","id":"color-customization","dir":"Articles","previous_headings":"Customizing The Plot","what":"Color Customization","title":"Guide: Plot Customization and Button Usage","text":"numerous visualization parameters change appearance plot notable changes can make colors. options include: drawn_line_color: parameter changes color lines user draws plot. true_line_color: parameter changes color actual line optionally confidence interval region plot, revealed user clicks ‘Show True Line’ button. draw_region_color: parameter changes color drawing region, area shows user’s progress draw line. default drawn_line_color true_line_color “steelblue” let’s generate confidence interval truly showcase color changes. Remember, must generate confidence interval data generator first display drawr() function. example use “red” drawing color “purple” true_line/conf_int color. Remember see true line, must complete complete graph (shown yellow progress region). Try example ! Changing draw_region_color also option. can changed color can even removed choosing “white” NULL, however recommended progress region made help user completing line. removing draw region, recommended use show_tooltip = TRUE user way know skipped portion line. tooltip display progress hovering area yet drawn connected line. information plot customization options, make sure go ‘drawr()’ function documentation.","code":"# Generate new data with confidence interval conf_data <- linearDataGen(y_int = 0,                       slope = 1,                       sigma = 2.5,                       N = 20,                       conf_int = T)  # Create plot with new color paramaters and display confidence interval region drawr(data = conf_data,       drawn_line_color = \"red\",       true_line_color = \"purple\",       conf_int = T) drawr(data = data,       draw_region_color = \"green\") drawr(data = data,       draw_region_color = NULL,       show_tooltip = TRUE)"},{"path":[]},{"path":"https://earobinson95.github.io/youdrawitR/articles/linearDataGen.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Examples: linearDataGen","text":"linearDataGen() function youdrawitR package allows generate linear line point data suitable drawr() function. vignette guide use function visualize generated data.","code":"library(youdrawitR)"},{"path":"https://earobinson95.github.io/youdrawitR/articles/linearDataGen.html","id":"generating-linear-data","dir":"Articles","previous_headings":"","what":"Generating Linear Data","title":"Examples: linearDataGen","text":"Let’s generate simple linear data. linearDataGen() function takes several arguments: y_int slope define y-intercept slope line data. sigma standard deviation point data. N number points generate. Default 30. x_min x_max minimum maximum x values line point data. Defaults 0 20. conf_int logical argument specifying whether 95% confidence interval generated drawr function. Default FALSE. TRUE, user must also specify conf_int = TRUE drawr() function generate 95% confidence interval area. linearDataGen() function returns list containing point data line data generated parameters. Let’s take look data generated example :","code":"set.seed(123) # Set seed to generate consistent data  # Generate linear data linear_data <- linearDataGen(   y_int = 0,   slope = 2,   sigma = 2,   N = 30,   x_min = 0,   x_max = 20,   conf_int = F ) linear_data #> $point_data #> # A tibble: 30 × 3 #>    data           x      y #>    <chr>      <dbl>  <dbl> #>  1 point_data 0     -1.12  #>  2 point_data 0.690  0.919 #>  3 point_data 1.38   5.88  #>  4 point_data 2.07   4.28  #>  5 point_data 2.76   5.78  #>  6 point_data 3.45  10.3   #>  7 point_data 4.14   9.20  #>  8 point_data 4.83   7.13  #>  9 point_data 5.52   9.66  #> 10 point_data 6.21  11.5   #> # ℹ 20 more rows #>  #> $line_data #> # A tibble: 81 × 5 #>    data          x     y  coef   int #>    <chr>     <dbl> <dbl> <dbl> <dbl> #>  1 line_data  0    0.619  1.93 0.619 #>  2 line_data  0.25 1.10   1.93 0.619 #>  3 line_data  0.5  1.58   1.93 0.619 #>  4 line_data  0.75 2.07   1.93 0.619 #>  5 line_data  1    2.55   1.93 0.619 #>  6 line_data  1.25 3.03   1.93 0.619 #>  7 line_data  1.5  3.51   1.93 0.619 #>  8 line_data  1.75 3.99   1.93 0.619 #>  9 line_data  2    4.48   1.93 0.619 #> 10 line_data  2.25 4.96   1.93 0.619 #> # ℹ 71 more rows"},{"path":"https://earobinson95.github.io/youdrawitR/articles/linearDataGen.html","id":"plotting-the-linear-data","dir":"Articles","previous_headings":"","what":"Plotting the Linear Data","title":"Examples: linearDataGen","text":"linear data generated, can use drawr() function youdrawitR package plot , See example : plot , can try draw trend line. ’ll notice data clear linear relationship x y, can readily visualized function. can experiment different settings linearDataGen() function’s parameters generate different types linear data.","code":"drawr(data = linear_data)"},{"path":"https://earobinson95.github.io/youdrawitR/articles/linearDataGen.html","id":"confidence-intervals","dir":"Articles","previous_headings":"","what":"Confidence Intervals","title":"Examples: linearDataGen","text":"One important feature linearDataGen() function, youdrawitR package general ability add lines interactive graphic. One useful instance user generate draw 95% confidence intervals line best fit. set conf_int = TRUE linearDataGen() drawr() functions, functions generate lower upper bounds confidence interval. Let’s generate linear data confidence interval. plot , shaded region displayed upon completion original line (shown yellow progress region) represent lower upper bounds 95% confidence interval line best fit. user can attempt draw upper lower bounds confidence interval using “New Line” button interactive plot. Try plot .","code":"set.seed(123) # Set seed to generate consistent data  # Generate linear data linear_data_conf <- linearDataGen(   y_int = 0,   slope = 2,   sigma = 8,   N = 30,   x_min = 0,   x_max = 20,   conf_int = T )  # Plot the data with a confidence interval drawr(   linear_data_conf,   conf_int = TRUE,   title = \"Visualization with Confidence Interval\" )"},{"path":"https://earobinson95.github.io/youdrawitR/articles/web_only/ShinyApp.html","id":"introduction","dir":"Articles > Web_only","previous_headings":"","what":"Introduction","title":"Shiny App","text":"“Can ‘Draw ’?” app interactive Shiny web application allows users draw lines data plot, enabling visual estimation modeling data trends. shiny app utilizes accompanies youdrawitR package.","code":""},{"path":[]},{"path":"https://earobinson95.github.io/youdrawitR/articles/web_only/ShinyApp.html","id":"main-interface","dir":"Articles > Web_only","previous_headings":"Features","what":"Main Interface","title":"Shiny App","text":"main interface comprises plot users can interactively draw lines . interface also includes several buttons options, : Input Data: Upload data via file upload text box. pop-options display user presses button. Simulate Data: Create simulated data. pop-options display user presses button. Reset: Clear user-drawn lines reset progress. New Line Checkbox: Switch drawing new line extending original line. Show/Hide Tooltip Checkbox: Toggles visibility tooltip. Confidence Interval Checkbox: Toggles generation confidence intervals.","code":""},{"path":"https://earobinson95.github.io/youdrawitR/articles/web_only/ShinyApp.html","id":"recorded-data","dir":"Articles > Web_only","previous_headings":"Features","what":"Recorded Data","title":"Shiny App","text":"user completed graph (shown yellow progress region), recorded x y data user lines shown. can select data want display: original line new user-drawn lines, exists. multiple new user-drawn lines drawn can also select line data like display using slider input, precedence line drawn (first new user-drawn line number 1 etc). user can save data local device using Save Data button. Clicking button download data user currently viewing.","code":""},{"path":"https://earobinson95.github.io/youdrawitR/articles/web_only/ShinyApp.html","id":"how-to-use","dir":"Articles > Web_only","previous_headings":"","what":"How To Use","title":"Shiny App","text":"Toggle display tooltip confidence intervals respective checkboxes. Optionally, load data clicking Input Data create simulated data clicking Simulate Data choosing options displayed. Draw line clicking dragging mouse across plot. add new line line, click new line checkbox. current drawing line click stop drawing (current drawing line go back original line). Clicking add new line. Users go back newly drawn line stop drawing. Choose drawn line data selecting “Original line” New lines” “Select data display” section. Use slider select line want display. Save recorded data later use clicking Save Data. Click Reset clear user-drawn lines reset application. run shiny app R user can copy code: shiny::runApp(system.file(\"shinyapp/youdrawit\", package = \"youdrawitR\")) can also access app directly web browser following link.","code":""},{"path":"https://earobinson95.github.io/youdrawitR/articles/web_only/ShinyApp.html","id":"try-for-yourself","dir":"Articles > Web_only","previous_headings":"","what":"Try For Yourself","title":"Shiny App","text":"deployed app found link :","code":""},{"path":"https://earobinson95.github.io/youdrawitR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emily . Robinson. Maintainer. Dillon Murphy. . Susan VanderPlas. . Heike Hofmann. .","code":""},{"path":"https://earobinson95.github.io/youdrawitR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Murphy D, VanderPlas S, Hofmann H, Robinson E (2023). youdrawitR: 'Draw '. R package version 0.1.0, https://earobinson95.github.io/youdrawitR/.","code":"@Manual{,   title = {youdrawitR: 'You Draw It'},   author = {Dillon Murphy and Susan VanderPlas and Heike Hofmann and Emily Robinson},   year = {2023},   note = {R package version 0.1.0},   url = {https://earobinson95.github.io/youdrawitR/}, }"},{"path":[]},{"path":"https://earobinson95.github.io/youdrawitR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"You Draw It","text":"‘Draw ’ feature allows users interact chart directly drawing line computer screen mouse. Originally introduced New York Times 2015 purpose interactive reading, package adapts use ‘Draw ’ method tool interactive testing graphics.","code":""},{"path":"https://earobinson95.github.io/youdrawitR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"You Draw It","text":"","code":"devtools::install_github(\"earobinson95/youdrawitR\")"},{"path":"https://earobinson95.github.io/youdrawitR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"You Draw It","text":"First, load youdrawitR package , can generate data use drawr() function using either linearDataGen() customDataGen() functions. linearDataGen() function used simulate linear dataset example. Lastly, data can entered drawr() function user can draw line predict trend data. many visual parameters users can change drawr() function, example progress tooltip shown. example using interactive graphic. new line functionality used example draw upper lower bounds 95% confidence interval.","code":"library(youdrawitR) data <- linearDataGen(y_int = -4,                       slope  = 0.8,                       sigma  = 2.8,                       x_min   = 0,                       x_max   = 20,                       N       = 40) drawr(data, show_tooltip = TRUE)"},{"path":"https://earobinson95.github.io/youdrawitR/index.html","id":"button-info","dir":"","previous_headings":"","what":"Button Info","title":"You Draw It","text":"Add: Discuss new line functionality, download data button, hide. (maybe add articles)","code":""},{"path":"https://earobinson95.github.io/youdrawitR/reference/customDataGen.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Data Generator — customDataGen","title":"Custom Data Generator — customDataGen","text":"customDataGen() takes R data frame processes generate data suitable drawr() function.","code":""},{"path":"https://earobinson95.github.io/youdrawitR/reference/customDataGen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Data Generator — customDataGen","text":"","code":"customDataGen(   df,   xvar = NULL,   yvar = NULL,   regression_type = \"linear\",   success_level = NULL,   degree = NULL,   span = 0.75,   log_y = F,   log_base = NULL,   conf_int = F )"},{"path":"https://earobinson95.github.io/youdrawitR/reference/customDataGen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Data Generator — customDataGen","text":"df R data frame containing input data. xvar name x variable string. null provided use first column dataframe (default: NULL) yvar name y variable string. null provided use second column dataframe. (default: NULL) regression_type Type regression data generate. Options include \"linear\", \"polynomial\", \"logistic\" (binary logistic regression), \"loess\". (Default: \"linear\") success_level level binary categorical variable considered success using \"logistic\" regression. NULL uses alphabetical order. (Default: NULL) degree degree polynomial loess regression. chosen regression_type. loess 'degree' must 0, 1 2. (Default: 2 polynomial, 1 loess) span span loess regression. (Default: 0.75) log_y Specify whether apply logarithmic transformation y fitted line using non-linear scale drawr() function. Currently linear regression. TRUE, fitted line transformed log(y) ~ x; FALSE, fitted line transformed. (default: FALSE) log_base Log base log transformation, applies log_y true. NULL apply natural log transformation. Log_base match log_base choice drawr() function. (default: NULL) conf_int 95% confidence interval generated drawr() function. Currently linear regression. (default: FALSE)","code":""},{"path":"https://earobinson95.github.io/youdrawitR/reference/customDataGen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom Data Generator — customDataGen","text":"list containing point data line data (equation info) processed inputted data frame.","code":""},{"path":"https://earobinson95.github.io/youdrawitR/reference/drawr.html","id":null,"dir":"Reference","previous_headings":"","what":"Drawr — drawr","title":"Drawr — drawr","text":"drawr() draws interactive -draw-plot interactive testing graphics.  Data can simulated using linearDataGen() inputted using data frame  customDataGen().","code":""},{"path":"https://earobinson95.github.io/youdrawitR/reference/drawr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drawr — drawr","text":"","code":"drawr(   data,   save_html_file_path = NULL,   hide_buttons = FALSE,   conf_int = FALSE,   linear = \"true\",   log_base = NULL,   draw_start = NULL,   points_end = NULL,   x_by = 0,   free_draw = TRUE,   points = \"full\",   aspect_ratio = 1,   title = \"\",   x_range = NULL,   y_range = NULL,   x_lab = \"\",   y_lab = \"\",   subtitle = \"\",   drawn_line_color = \"steelblue\",   true_line_color = \"steelblue\",   draw_region_color = \"rgba(255,255,0,.8)\",   x_axis_buffer = 0,   y_axis_buffer = 0.05,   show_finished = TRUE,   show_tooltip = FALSE )"},{"path":"https://earobinson95.github.io/youdrawitR/reference/drawr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drawr — drawr","text":"data data containing line data (equation info) point data. save_html_file_path File path save d3 output html. null save. Can just provide filename save current working directory. (default: NULL) hide_buttons Logical value indicating whether show hide buttons. TRUE = hide, FALSE = show (default: FALSE) conf_int Whether generate 95% confidence interval fitted line. Must select conf_int = TRUE linearDataGen() customDataGen() functions generate interval. (default: FALSE) linear Choice linear log y-scale, true = linear, else = log. using log scale choose log_y = TRUE customDataGen() function generating data. (default: \"true\"). log_base base log scale, affects graph linear \"true\". NULL use natural logarithm. Log_base match log_base choice customDataGen() function (default = NULL) draw_start starting point drawing. Must larger minimum x value smaller maximum x value. null provided use minimum x plus smallest possible positive number x min != sum. provide free_draw != TRUE. (default: NULL). points_end ending x-value points. affect graph points \"partial\" (default: NULL). x_by offset applied rectangle relation current progress. (default: 0) free_draw Whether allow freehand drawing entire graph. false, begin drawing draw_start. (default: T). points type points displayed. Choices: \"full\" \"partial\". Full always display points, partial user can choose include points. (default: \"full\"). aspect_ratio aspect ratio plot (default: 1). title title plot. (default: \"\") x_range range x values. null provided use range line data x values. WARNING: even x_range smaller x range point data, line still fitted points dataset. (default: NULL) y_range range y values. null provided use range line data y values. WARNING: even y_range smaller y range point data, line still fitted points dataset. (default: NULL) x_lab x-axis label. (default: \"\") y_lab y-axis label. (default: \"\") subtitle subtitle plot. (default: \"\") drawn_line_color color drawn lines. (default: \"steelblue\") true_line_color color true drawn lines confidence interval region. (default: \"steelblue\") draw_region_color color drawing region displays progress. NULL, region transparent. (default: \"rgba(255,255,0,.8)\" (yellow)) x_axis_buffer buffer x-axis added x range, calculated percent x range. used x_range NULL, must greater equal 0. (default: 0) y_axis_buffer buffer y-axis added y range, calculated percent y range. used y_range NULL, must greater equal 0. (default: 0.05) show_finished Whether show finished plot (default: TRUE). show_tooltip Whether display tooltips . (default: FALSE)","code":""},{"path":"https://earobinson95.github.io/youdrawitR/reference/drawr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drawr — drawr","text":"rendered interactive -draw-plot. plot displayed automatically function called assigned variable use.","code":""},{"path":"https://earobinson95.github.io/youdrawitR/reference/drawr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drawr — drawr","text":"","code":"# Example 1: Simulating linear data and plotting data <- linearDataGen(y_int = -4,                       slope  = 0.8,                       sigma  = 2.8,                       x_min  = 0,                       x_max  = 20,                       N      = 40) print(drawr(data))  # Example 2: Using custom data frame and custom options df <- data.frame(Time = c(0, 1, 2, 3, 4, 5, 9, NA, 12, 6, 7),                  Cost = c(NA, 2, 4, 6, 8, 10, 18, 12, 10, 14, 14)) data <- customDataGen(df, \"Time\", \"Cost\") print(drawr(data           = data,             aspect_ratio   = 0.85,             title          = \"Title\",             x_range        = c(0, 15),             subtitle       = \"Subtitle\",             x_lab          = \"x-axis\",             y_lab          = \"y-axis\",             x_axis_buffer  = 0,             y_axis_buffer  = 1,             show_tooltip   = TRUE))              # Example 3: Using a non-linear scale df <- data.frame(Time = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) df$Cost <- exp(df$Time) data <- customDataGen(df = df, log_y = TRUE, log_base = 2) print(drawr(data, linear = \"no\", log_base = 2))  # Example 4: Start drawing in the middle and include tooltips df <- data.frame(   Time = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),   Cost = c(1, 4, 9, 16, 18, 16, 9, 4, 2, 1) )  data <- df |>  customDataGen()  print(drawr(data, free_draw = FALSE, draw_start = 5))"},{"path":"https://earobinson95.github.io/youdrawitR/reference/linearDataGen.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Data Generation — linearDataGen","title":"Linear Data Generation — linearDataGen","text":"linearDataGen() generates simulated linear line data (equation info) point data  suitable drawr() function.","code":""},{"path":"https://earobinson95.github.io/youdrawitR/reference/linearDataGen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Data Generation — linearDataGen","text":"","code":"linearDataGen(y_int, slope, sigma, N = 30, x_min = 0, x_max = 20, conf_int = F)"},{"path":"https://earobinson95.github.io/youdrawitR/reference/linearDataGen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Data Generation — linearDataGen","text":"y_int y intercept line data. slope slope true line data sigma standard deviation line data. N number points generate. (default: 30) x_min minimum x value. (default: 0) x_max maximum x value. (default: 20) conf_int 95% confidence interval generated drawr() function. (default: FALSE)","code":""},{"path":"https://earobinson95.github.io/youdrawitR/reference/linearDataGen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Data Generation — linearDataGen","text":"list containing generated point data line data (equation info).","code":""}]
